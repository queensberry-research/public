#!/usr/bin/env sh

echo_date() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*" >&2; }

main() {
	[ $# -ne 0 ] && echo_date "'setup-vm' accepts no arguments; got $#" && return 1
	setup_aliases
	setup_bottom
	setup_delta
	setup_editing_mode
	setup_just

	# apt
	setup_apt
	setup_git # after apt

	# env vars
	setup_env_vars
	setup_direnv   # after env vars
	setup_starship # after env vars

	# neovim
	setup_neovim
	setup_lazyvim        # after git & neovim
	setup_neovim_plugins # after lazyvim
}

get_shell_rc() {
	case "${SHELL}" in
	*/bash) filename='.bashrc' ;;
	*/zsh) filename='.zshrc' ;;
	*) echo_date "Invalid shell: '${SHELL}'" && return 1 ;;
	esac
	echo "${HOME}/${filename}"
}

get_shell_name() {
	case "${SHELL}" in
	*/bash) echo 'bash' ;;
	*/zsh) echo 'zsh' ;;
	*) echo_date "Invalid shell: '${SHELL}'" && return 1 ;;
	esac
}

setup_aliases() {
	path=$(get_shell_rc) || return 1
	if grep -q '# aliases' "${path}"; then
		echo_date 'Aliases already setup'
	else
		echo_date 'Setting up aliases...'
		cat <<'EOF' >>"${path}"

# aliases
alias ~='cd "${HOME}"'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias l='ls -al'
EOF
	fi
}

setup_apt() {
	echo_date "Checking 'apt' sources..."
	dir_='/etc/apt/sources.list.d/'
	for filename in 'ceph.sources' 'pve-enterprise.sources'; do
		path="${dir_}/${filename}"
		if [ -f "${path}" ]; then
			echo_date "Deleting '${path}'..."
			rm "${path}"
		fi
	done
}

setup_bottom() {
	if command -v btm >/dev/null 2>&1; then
		echo_date "'bottom' already set up..."
	else
		echo_date "Setting up 'bottom'..."
		temp_dir=$(mktemp -d)
		trap 'rm -rf "${temp_dir}"' EXIT
		cd "${temp_dir}" || exit 1
		version='0.11.1'
		url="https://github.com/ClementTsang/bottom/releases/download/${version}/bottom_${version}-1_amd64.deb"
		curl -LO "${url}"
		if [ "$(whoami)" = 'root' ]; then
			dpkg -i bottom_*_amd64.deb
		else
			sudo dpkg -i bottom_*_amd64.deb
		fi
	fi
}

setup_delta() {
	if command -v delta >/dev/null 2>&1; then
		echo_date "'delta' already set up"
	else
		echo_date "Setting up 'delta'..."
		temp_dir=$(mktemp -d) || return 1
		trap 'rm -rf "${temp_dir}"' EXIT
		cd "${temp_dir}" || return 1
		version='0.18.2'
		filename="delta-${version}-x64_64-unknown-linux-gnu"
		tar_gz="${filename}.tar.gz"
		url="https://github.com/dandavison/delta/releases/download/${version}/${tar_gz}"
		curl -LO "${url}"
		tar xzvf "${tar_gz}"
		mkdir -p "${HOME}/bin"
		cp -r "${filename}/delta" "${HOME}/bin/delta"
	fi
}

setup_editing_mode() {
	path=$(get_shell_rc) || return 1
	if grep -q '# editing mode' "${path}"; then
		echo_date "Editing mode already set up"
	else
		echo_date "Setting up editing mode..."
		case "${SHELL}" in
		*/bash) cmd='set -o vi' ;;
		*/zsh) cmd='bindkey -v' ;;
		*) echo_date "Invalid shell: '${SHELL}'" && return 1 ;;
		esac
		cat <<EOF >>"${path}"

# editing mode
${cmd}
EOF
	fi
}

setup_direnv() {
	if command -v direnv >/dev/null 2>&1; then
		echo_date "'direnv' already set up"
	else
		echo_date "Setting up 'direnv'..."
		curl -sfL https://direnv.net/install.sh | bash # must be bash
		path=$(get_shell_rc) || return 1
		cat <<EOF >>"${path}"

# direnv
eval "\$(direnv hook $(get_shell_name))"
EOF
	fi
}

setup_env_vars() {
	path=$(get_shell_rc) || return 1
	if grep -q '# env vars' "${path}"; then
		echo_date "Env vars already set up"
	else
		echo_date "Setting up env vars..."
		cat <<'EOF' >>"${path}"

# env vars
export EDITOR='nvim'
export PATH="${HOME}/bin${PATH:+:${PATH}}"
EOF
	fi
}

setup_git() {
	if command -v git >/dev/null 2>&1; then
		echo_date "'git' already set up"
	else
		echo_date "Setting up 'git'..."
		if [ "$(whoami)" = 'root' ]; then
			apt install -y git
		else
			sudo apt install -y git
		fi
	fi
}

setup_just() {
	if command -v just >/dev/null 2>&1; then
		echo_date "'just' already set up"
	else
		echo_date "Setting up 'just'..."
		curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | sh -s -- --to "${HOME}/bin"
	fi
}

setup_neovim() {
	if command -v nvim >/dev/null 2>&1; then
		echo_date "'neovim' already set up"
	else
		echo_date "Setting up 'neovim'..."
		temp_dir=$(mktemp -d) || return 1
		trap 'rm -rf "${temp_dir}"' EXIT
		cd "${temp_dir}" || return 1
		version='0.11.4'
		filename='nvim-linux-x86_64'
		tar_gz="${filename}.tar.gz"
		url="https://github.com/neovim/neovim/releases/download/v${version}/${tar_gz}"
		curl -LO "${url}"
		tar xzvf "${tar_gz}"
		mkdir -p "${HOME}/bin"
		cp -r "${filename}" "${HOME}/bin/${filename}"
		(
			cd "${HOME}"/bin || exit 1
			ln -s "${filename}/bin/nvim" .
		)
		path=$(get_shell_rc) || return 1
		cat <<'EOF' >>"${path}"

# neovim
alias n='nvim'
EOF
	fi
}

setup_lazyvim() {
	path="${HOME}/.config/nvim/lua/config/lazy.lua"
	if [ -f "${path}" ]; then
		echo_date "'lazyvim' already set up"
	else
		echo_date "Setting up 'lazyvim'..."
		rm -rf "${HOME}"/.config/nvim/
		rm -rf "${HOME}"/.local/share/
		rm -rf "${HOME}"/.local/state/
		rm -rf "${HOME}"/.cache/nvim/
		command -v git >/dev/null 2>&1 || setup_git
		git clone https://github.com/LazyVim/starter "${HOME}"/.config/nvim
	fi
}

setup_neovim_plugins() {
	path="${HOME}"/.config/nvim/lua/plugins/auto-save.lua
	if [ -f "${path}" ]; then
		echo_date "Neovim plugins already setup"
	else
		echo_date "Setting up neovim plugins..."
		cat <<'EOF' >>"${path}"
return { "pocco81/auto-save.nvim" }
EOF
	fi
}

setup_starship() {
	if command -v starship >/dev/null 2>&1; then
		echo_date "'starship' already set up"
	else
		echo_date "Setting up 'starship'..."
		curl -sS https://starship.rs/install.sh | sh -s -- --bin-dir "${HOME}"/bin
		path=$(get_shell_rc) || return 1
		cat <<EOF >>"${path}"

# starship
eval "\$(starship init $(get_shell_name))"
EOF
	fi
}

main "$@"
