from __future__ import annotations

from logging import getLogger

from .installer_utilities import (
    TRY_DIRENV_EXPORT,
    TemporaryDirectory,
    append_contents,
    apt_install,
    apt_update,
    brew_install,
    brew_installed,
    check_for_commands,
    chmod,
    chown,
    contains_line,
    cp,
    cp_if_given,
    download,
    dpkg_install,
    full_path,
    get_latest_tag,
    get_output,
    git_pull,
    have_command,
    is_root,
    log_installer_version,
    luarocks_install,
    mac_app_exists,
    replace_line,
    replace_lines,
    rm,
    run_commands,
    run_one_command,
    symlink,
    symlink_if_given,
    symlink_many_if_given,
    temp_environ,
    touch,
    update_submodules,
    uv_tool_install,
    which,
    write_template,
    write_text,
    yield_download,
    yield_github_latest_download,
    yield_tar_gz_contents,
)

_LOGGER = getLogger(__name__)


def log_public_version() -> None:
    _LOGGER.info("'public' version: 0.4.152")


__all__ = [
    "TRY_DIRENV_EXPORT",
    "TemporaryDirectory",
    "append_contents",
    "apt_install",
    "apt_update",
    "brew_install",
    "brew_installed",
    "check_for_commands",
    "chmod",
    "chown",
    "contains_line",
    "cp",
    "cp_if_given",
    "download",
    "dpkg_install",
    "full_path",
    "get_latest_tag",
    "get_output",
    "git_pull",
    "have_command",
    "is_root",
    "log_installer_version",
    "luarocks_install",
    "mac_app_exists",
    "replace_line",
    "replace_lines",
    "rm",
    "run_commands",
    "run_one_command",
    "symlink",
    "symlink_if_given",
    "symlink_many_if_given",
    "temp_environ",
    "touch",
    "update_submodules",
    "uv_tool_install",
    "which",
    "write_template",
    "write_text",
    "yield_download",
    "yield_github_latest_download",
    "yield_tar_gz_contents",
]
